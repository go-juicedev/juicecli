package internal

import (
	"fmt"
	"io"
	"os"
	"strings"
)

type Generator struct {
	impl Implement
}

func (g *Generator) Generate() (io.Reader, error) {
	builder := strings.Builder{}
	args := strings.Join(os.Args[:], " ")
	builder.WriteString(fmt.Sprintf("// Code generated by \"%s\"; DO NOT EDIT.", args))
	builder.WriteString("\n\n")
	data, err := g.impl.Render()
	if err != nil {
		return nil, err
	}
	return strings.NewReader(data), nil
}

// WriteTo writes generated code to writer.
func (g *Generator) WriteTo(writer io.Writer) (int64, error) {
	reader, err := g.Generate()
	if err != nil {
		return 0, err
	}
	return io.Copy(writer, reader)
}

func NewGenerator(impl Implement) *Generator {
	return &Generator{impl: impl}
}
